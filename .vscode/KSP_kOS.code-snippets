{
	// Place your KASA-RP1-PPE workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"NewFunction": {
	"prefix": "NewFunction",
	"body": [
		"// FunctionName :: (param)<type> [(optionalParam)<type>] -> (output)<type>",
		"// Function Description",
		"global function FunctionName",
		"{",
		"}"
	],
	"description": "New Global Function Template"
	},
    "New Function Group": {
        "prefix": "NewFuncGroup",
        "body": [
          "//  *- GroupName",
          "// #region",
          "",
          "    // FunctionName :: Input / Output",
          "    // Description",
          "    global function foo",
          "    {",
          "    }",
          "",
          "// #endregion"
        ],
        "description": "New Function Group"
    },
    "NewLibAEA": {
        "prefix": "NewLibAEA",
        "body": [
            "// #include \"0:/lib/depLoader.ks\"",
            "@LazyGlobal off.",
            "",
            "// ***~~~ Dependencies ~~~*** //",
            "// #region",
            "// #endregion",
            "",
            "",
            "// ***~~~ Variables ~~~*** //",
            "// #region",
            "    ",
            "    // *- Local",
            "    // #region",
            "    // #endregion",
            "",
            "    // *- Global",
            "    // #region",
            "    // #endregion",
            "// #endregion",
            "",
            "// ***~~~ Delegate Objects ~~~*** //",
            "    // *- Local Anonymous Delegates",
            "    // #region",
            "    // #endregion",
            "",
            "    // *- Global Anonymous Delegates",
            "    // #region",
            "    // #endregion",
            "// #endregion",
            "",
            "",
            "// ***~~~ Functions ~~~*** //",
            "// #region",
            "",
            "//  *- Function Group",
            "// #region",
            "",
            "    // FunctionName :: (input params)<type> -> (output params)<type>",
            "    // Description",
            "    ",
            "// #endregion",
            "// #endregion"
        ],
        "description": "NewLibAEA"
    },
	"NewLibraryLessOld": {
		"prefix": "NewLibLessOld",
		"body": [
		  "// #include \"0:/lib/depLoader.ks\"",
		  "@lazyGlobal off.",
		  "",
		  "// *~ Dependencies ~* //",
		  "// Required libraries not loaded by libLoader by default go here",
		  "// #region",
		  "// #endregion",
		  "",
		  "",
		  "// *~ Variables ~* //",
		  "// Local and global variables used in this library",
		  "// #region",
		  "    // *- Local",
		  "    // #region",
		  "    // #endregion",
		  "",
		  "    // *- Global",
		  "    // #region",
		  "    // #endregion",
		  "// #endregion",
		  "",
		  "",
		  "// *~ Functions ~* //",
		  "// #region",
		  "  ",
		  "    // *- Function Block",
		  "    // #region",
		  "",
		  "    // FunctionName :: (param)<type> [(optionalParam)<type>] -> (output)<type>",
		  "    // Function Description",
		  "",
		  "    // #endregion",
		  "// #endregion"
		],
		"description": "New Default Library Template"
	  },
		"New Script Header": {
		"prefix": "NewScript",
		"body": [
			"@LazyGlobal off.",
			"ClearScreen.",
			"",
			"parameter _params to list().",
			"",
			"RunOncePath(\"0:/lib/depLoader.ks\").",
			"",
			"set g_MainProcess to ScriptPath().",
			"DispMain()."
		],
		"description": "New Script Header"
	},
    "From Loop: List Length": {
        "prefix": "FromListLength",
        "body": [
          "from { local i to 0.} until i = list__:Length step { set i to i + 1.} do {}"
        ],
        "description": "From Loop: List Length"
    }
}