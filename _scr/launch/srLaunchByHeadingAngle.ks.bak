@lazyGlobal off.
ClearScreen.

parameter params is list(90, 87).

runOncePath("0:/lib/globals.ks").
runOncePath("0:/lib/util.ks").
runOncePath("0:/lib/launch.ks").
runOncePath("0:/kslib/lib_navball.ks").

set Terminal:width to 64.
set Terminal:height to 48.
Core:doEvent("open terminal").

set s_val to ship:facing.
lock steering to s_val.

set t_val to 0.
lock throttle to t_val.

local altStartTurn          to 250.
local parsedTag             to ParseCoreTag(Core:Tag).
local resPctRemaining       to 0.
local stageStop             to parsedTag[parsedTag:length - 1].
local tgt_Hdg               to choose params[0] if params:length > 0 else 90.
local tgt_vAng              to choose params[1] if params:length > 1 else 87.
local resObj                to lex().

local spinStaged to false.

local doneFlag to false.
set g_TermChar     to "".
set g_line      to 10.

// Script flags can be added to the global g_scriptFlags object
local f_spinStabilizationName to "f_spinStabilization".
local f_spinStabilizationID to "Launch_00".
set f_spinStabilization   to false.
set g_scriptFlags[f_spinStabilizationID] to f_spinStabilization.
set g_scriptFlags["Ref"][f_spinStabilizationID] to f_spinStabilizationName.

local f_hotStageName    to "f_hotStage".
local f_hotStageID      to "Launch_01".
local f_hotStage        to false.
set g_scriptFlags[f_hotStageID] to f_hotStage.
set g_scriptFlags["Ref"][f_hotStageID] to f_hotStageName.

// SetProg(1).

// global g_prog to lex (
//     0, "NULL",
//     1, "PRE-LAUNCH"
// ).


OutMsg("Press Enter to Launch").

until doneFlag
{
    if Terminal:Input:hasChar
    {
        set g_TermChar to Terminal:Input:getchar.
    }
    if g_TermChar = Terminal:Input:enter set doneFlag to true.
}

for dc in ship:decouplers
{
    if dc:Tag:matchesPattern(".*spinStab.*")
    {
        set f_spinStabilization to ToggleScriptFlag(g_scriptFlags["REF"]["NAME"]["f_spinStabilization"], true).
        // set f_spinStabilization to true.
        // set g_scriptFlags[f_spinStabilizationID] to true.
        // g_stageInfo["SpinStabilized"]:add(dc:decoupledIn).
        // OutMsg("spinStabilized: True").
        // print "{0,10}: {1}":format("SPIN STAB", f_spinStabilization) at (40, 4).
    }
    if dc:Tag:matchesPattern(".*hotStage.*")
    {
        set f_hotStage to ToggleScriptFlag(g_scriptFlags["REF"]["NAME"]["f_hotStage"], true).
        // set f_hotStage to true.
        // set g_scriptFlags[f_hotStageID] to true.
        // g_stageInfo["HotStage"]:add(dc:decoupledIn).
        // OutMsg("HotStage: True").
        // print "{0,10}: {1}":format("HOT STAGE", f_hotStage) at (40, 4).
    }
}

// Idk
on Terminal:Input:hasChar
{
    GetTermChar().
    
    if g_TermChar = Terminal:Input:homecursor
    {
        set f_spinStabilization to SetScriptFlag(f_spinStabilizationID, f_spinStabilization).
        set f_spinStabilization to choose false if f_spinStabilization else true.
        set g_scriptFlags[f_spinStabilizationID] to f_spinStabilization.
        local str to "[{0}] {1}":format("f_spinStabilization", f_spinStabilization).
        OutInfo(str).
        print "{0,10}: {1}":format("SPIN STAB", f_spinStabilization) at (40, 4).
        //SetScriptFlag(f_spinStabilizationID, f_spinStabilization).
    }
    else if g_TermChar = Terminal:Input:endcursor
    {
        set f_hotStage to choose false if f_hotStage else true.
        set g_scriptFlags[f_hotStageID] to f_hotStage.
        local str to "[{0}] {1}":format("f_hotStage", f_hotStage).
        OutInfo(str).
        print "{0,10}: {1}":format("HOT STAGE", f_hotStage) at (40, 5).
        //SetScriptFlag(f_hotStageID, f_hotStage).
    }
    preserve.
}

set t_val to 1.
stage.
OutMsg("Ignition!").
wait 0.05.
set g_activeEngines to ActiveEngines(ship).
lock activeThrust to g_activeEngines["CURTHRUST"].
lock availThrust to g_activeEngines["AVLTHRUST"].

local thrustPerf to max(0.00001, activeThrust) / max(0.00001, availThrust).
if ship:status = "PRELAUNCH"
{
    until thrustPerf > 0.99250
    {
        DispSoundingTelemetry().
        set g_activeEngines to ActiveEngines(ship).
        // set activeThrust to g_activeEngines["CURTHRUST"].
        // set availThrust to g_activeEngines["AVLTHRUST"].

        set thrustPerf to max(0.00001, activeThrust) / max(0.00001, availThrust).
    }
    wait 0.01.
    stage.
}
OutMsg("Liftoff!").

ArmAutoStaging(stageStop).

OutMsg("Veritcal Ascent").
until alt:radar > altStartTurn
{
    DispSoundingTelemetry().
    wait 0.01.
}

set g_activeEngines to ActiveEngines(ship).
set resObj to GetResourcesFromEngines(g_activeEngines:engines).
set resPctRemaining to resObj:PctRemaining.
local rollCtrlVal to 0.25.

OutMsg("Gravity Ascent Program").
until stage:number = stageStop 
{
    local nextStage to stage:number - 1.
    
    until ship:velocity:surface:mag >= 175
    {
        //set tgt_vAng to max(0, round(get_vAng:call(88, 0.875), 3)).
        set s_val    to heading(tgt_Hdg, tgt_vAng).
        
        set resObj to GetResourcesFromEngines(g_activeEngines:engines).
        set resPctRemaining to resObj:PctRemaining.

        if f_hotStage
        {
            if resPctRemaining < 0.10
            {
                HotStage(0.00125).
                set doneFlag to true.
            }
        }
        
        DispSoundingTelemetry(list(tgt_vAng)).
        wait 0.01.
    }
    
    if f_spinStabilization
    {
        //set doneFlag to true.
        set ship:control:roll to rollCtrlVal.
        g_stageInfo["SpinStabilized"]:remove(nextStage). 
        if g_stageInfo["SpinStabilized"]:length = 0 set f_spinStabilization to false.
    }

    //if spinStaged unlock steering.
    until doneFlag or ship:altitude > body:atm:height
    {
        set tgt_vAng to max(0, round(get_vAng:call(88, 0.875), 3)).
        set s_val    to heading(90, tgt_vAng).
        
        if f_hotStage
        {
            set resObj to GetResourcesFromEngines(g_activeEngines:engines).
            set resPctRemaining to resObj:PctRemaining.
            if resPctRemaining < 0.10
            {
                HotStage(0.0025).
                set doneFlag to true.
            }
        }
        
        DispSoundingTelemetry(list(tgt_vAng)).
        wait 0.01.
    }
    set doneFlag to false.
}
//HotStage(0.01).
set rollCtrlVal to 0.
set s_val to ship:facing.

// set ship:control:pilotRollTrim to 0.
when ship:altitude > body:atm:height then 
{
    OutMsg("Reached space!").
    rcs on.
}

// set doneFlag to false.
// OutMsg("Continuing pitch program").
// until (ship:apoapsis > tgt_AP and body:atm:altitudepressure(ship:altitude) <= 0.001) or ship:altitude > body:atm:height or doneFlag
// {
//     set tgt_vAng to max(0, round(get_vAng:call(88), 3)).
//     //set tgt_vAng  to 90 * (1 - max(0, min(1, ((max(0.0001, ship:apoapsis) / tgt_AP) * 1.50)))).
//     //set s_val    to heading(compass_for(ship, ship:prograde), tgt_vAng, 0).
//     DispSoundingTelemetry(list(tgt_vAng)).
//     if alt:radar <= 25 set doneFlag to true.
//     wait 0.01.
// }

OutMsg("Flattening trajectory").
until doneFlag
{
    set tgt_vAng  to 0.
    set s_val    to heading(compass_for(ship, ship:prograde), tgt_vAng, 0).
    DispSoundingTelemetry(list(tgt_vAng)).
    if alt:radar <= 25 set doneFlag to true.
    wait 0.01.
}

ClearScreen.
OutMsg("Script complete").